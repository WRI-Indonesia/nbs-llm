generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole      @default(USER)
  accounts      Account[]
  sessions      Session[]
  chatHistory   ChatHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FlowProject {
  id          String     @id @default(cuid())
  name        String     @default("Main Project")
  description String?    @default("Main knowledge flow project")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  edges       FlowEdge[]
  nodes       FlowNode[]

  @@map("flow_projects")
}

model FlowNode {
  id        String      @id @default(cuid())
  projectId String
  nodeId    String
  type      String
  position  Json
  data      Json
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  project   FlowProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ragDocs   RagDocs[]

  @@unique([projectId, nodeId])
  @@map("flow_nodes")
}

model FlowEdge {
  id           String      @id @default(cuid())
  projectId    String
  edgeId       String
  source       String
  target       String
  sourceHandle String?
  targetHandle String?
  type         String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  project      FlowProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, edgeId])
  @@map("flow_edges")
}

model RagDocs {
  id        Int      @id @default(autoincrement())
  nodeId    String
  text      String
  embedding String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  node      FlowNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("rag_docs")
}

model ChatHistory {
  id            String   @id @default(cuid())
  userId        String
  projectId     String
  role          String   // 'user' or 'assistant'
  content       String
  sqlQuery      String?  // Store generated SQL query for assistant messages
  ragDocuments  Json?    // Store relevant RAG documents as JSON
  timestamp     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_history")
}

enum UserRole {
  ADMIN
  USER
}
