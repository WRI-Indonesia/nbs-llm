generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // For password-based authentication
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FlowProject {
  id          String     @id @default(cuid())
  name        String     @default("Main Project")
  description String?    @default("Main knowledge flow project")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  nodes       FlowNode[]
  edges       FlowEdge[]

  @@map("flow_projects")
}

model FlowNode {
  id        String      @id @default(cuid())
  projectId String
  project   FlowProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  nodeId    String // React Flow node ID
  type      String // Node type (e.g., "table")
  position  Json // { x: number, y: number }
  data      Json // TableNodeData as JSON
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([projectId, nodeId])
  @@map("flow_nodes")
}

model FlowEdge {
  id           String      @id @default(cuid())
  projectId    String
  project      FlowProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  edgeId       String // React Flow edge ID
  source       String // Source node ID
  target       String // Target node ID
  sourceHandle String?
  targetHandle String?
  type         String? // Edge type (e.g., "smoothstep")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([projectId, edgeId])
  @@map("flow_edges")
}

model RagDocs {
  id        Int      @id @default(autoincrement())
  text      String
  payload   Json
  embedding String?
  createdAt DateTime @default(now())
    updatedAt    DateTime    @updatedAt

  @@map("rag_docs")
}
