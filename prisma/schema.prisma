generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole      @default(USER)
  accounts      Account[]
  sessions      Session[]
  chatHistory   ChatHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FlowProject {
  id           String         @id @default(cuid())
  name         String         @default("Main Project")
  description  String?        @default("Main knowledge flow project")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  edges        FlowEdge[]
  nodes        FlowNode[]
  MinioDocs    MinioDocs[]
  indexingJobs IndexingJob[]

  @@map("flow_projects")
}

model FlowNode {
  id        String      @id @default(cuid())
  projectId String
  nodeId    String
  type      String
  position  Json
  data      Json
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  project   FlowProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  nodeDocs  NodeDocs[]

  @@unique([projectId, nodeId])
  @@map("flow_nodes")
}

model FlowEdge {
  id           String      @id @default(cuid())
  projectId    String
  edgeId       String
  source       String
  target       String
  sourceHandle String?
  targetHandle String?
  type         String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  project      FlowProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, edgeId])
  @@map("flow_edges")
}

model NodeDocs {
  id        Int      @id @default(autoincrement())
  nodeId    String
  text      String
  embedding String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  node      FlowNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("node_docs")
}

model MinioDocs {
  id               Int      @id @default(autoincrement())
  projectId        String
  fileName         String?  @default("")
  text             String
  embedding        String?
  contextPrecision  Float?
  contextRecall    Float?
  faithfulness     Float?
  answerRelevance  Float?
  averageScore     Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  project          FlowProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("minio_docs")
}

model IndexingJob {
  id             String    @id @default(cuid())
  projectId      String
  status         String    @default("pending") // pending, processing, paused, completed, failed, cancelled
  totalFiles     Int       @default(0)
  processedFiles Int       @default(0)
  successfulFiles Int      @default(0)
  failedFiles    Int       @default(0)
  totalDocuments Int       @default(0)
  error          String?
  startedAt      DateTime  @default(now())
  completedAt     DateTime?
  startedBy      String    // user who started it
  processedFileNames Json?  @default("[]") // Track which files have been processed for pause/resume
  project        FlowProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("indexing_jobs")
}

model ChatHistory {
  id            String   @id @default(cuid())
  userId        String
  projectId     String
  role          String   // 'user' or 'assistant'
  content       String
  sqlQuery      String?  // Store generated SQL query for assistant messages
  ragDocuments  Json?    // Store relevant RAG documents as JSON
  data          Json?    // Store SQL query results data as JSON
  timestamp     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_history")
}

model GeoLocation {
  id          Int     @id
  province    String  @db.VarChar(100)
  district    String  @db.VarChar(100)
  subdistrict String  @db.VarChar(100)
  village     String  @db.VarChar(100)
  geometry    String? // PostGIS geometry as text
  metadata_id Int?

  @@map("geo_locations")
}

enum UserRole {
  ADMIN
  USER
}
